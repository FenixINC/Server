buildscript {
    ext {
        kotlinVersion = '1.3.11'
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

group = 'com.server'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
    provided
}
ext['springBootAdminVersion'] = '2.1.1'
ext['vaadinVersion'] = '11.0.3'

sourceSets {
    main { compileClasspath += configurations.provided }
}

dependencies {
//    implementation('org.springframework.boot:spring-boot-starter-actuator')
//    implementation('org.springframework.boot:spring-boot-starter-amqp')
//    implementation('org.springframework.boot:spring-boot-starter-batch')
    implementation('org.springframework.boot:spring-boot-starter-cache')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
//    implementation('org.springframework.boot:spring-boot-starter-data-mongodb')
//    implementation('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
    implementation('org.springframework.boot:spring-boot-starter-data-rest')
    implementation('org.springframework.boot:spring-boot-starter-freemarker')
//    implementation('org.springframework.boot:spring-boot-starter-integration')
    implementation('org.springframework.boot:spring-boot-starter-jdbc')
    implementation('org.springframework.boot:spring-boot-starter-jooq')
//    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-web-services')
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('org.springframework.boot:spring-boot-starter-websocket')

    implementation('org.thymeleaf.extras:thymeleaf-extras-springsecurity4:3.0.4.RELEASE')
    implementation('javax.servlet.jsp.jstl:javax.servlet.jsp.jstl-api:1.2.2')
    implementation('org.webjars:bootstrap:4.2.1')
//    implementation('org.webjars:jquery:2.1.4')

    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation('com.vaadin:vaadin-spring-boot-starter')
    implementation('de.codecentric:spring-boot-admin-starter-client')
    implementation('de.codecentric:spring-boot-admin-starter-server')
//    implementation('org.liquibase:liquibase-core')
//    implementation('org.springframework.session:spring-session-jdbc')
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation('org.apache.commons:commons-dbcp2:2.5.0')
    implementation('commons-digester:commons-digester:2.1')
    provided('javax.servlet:javax.servlet-api:4.0.1')

    runtimeOnly('org.springframework.boot:spring-boot-devtools')
    runtimeOnly('com.h2database:h2')
    runtimeOnly('com.microsoft.sqlserver:mssql-jdbc')
    runtimeOnly('mysql:mysql-connector-java')
    runtimeOnly('org.postgresql:postgresql')
    compileOnly('org.springframework.boot:spring-boot-configuration-processor')
    compileOnly('org.projectlombok:lombok')
    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('io.projectreactor:reactor-test')
    testImplementation('org.springframework.batch:spring-batch-test')
//    testImplementation('org.springframework.security:spring-security-test')
}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
        mavenBom "com.vaadin:vaadin-bom:${vaadinVersion}"
    }
}